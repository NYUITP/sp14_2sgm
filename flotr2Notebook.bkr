{
    "beaker": "2",
    "evaluators": [
        {
            "name": "Html",
            "plugin": "./plugin/evaluator/html.js",
            "shellID": null
        },
        {
            "name": "Latex",
            "plugin": "./plugin/evaluator/latex.js",
            "shellID": null
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "shellID": "320E6E0CD16B4861A1ACA9E6E22DE0C9",
            "imports": "",
            "supplementalClassPath": ""
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "shellID": null,
            "jsSetting2": "",
            "jsSetting1": ""
        },
        {
            "name": "R",
            "plugin": "R",
            "shellID": "1cfef762-a229-4bfe-8875-7ccdce9e82f4"
        },
        {
            "name": "Groovy",
            "plugin": "Groovy",
            "shellID": "ccaace1d-a203-4689-9ac6-8f8db3e3d743"
        },
        {
            "name": "IRuby",
            "plugin": "IRuby",
            "shellID": "BD67DDF962194BD8A10A9D164DE9F36B",
            "imports": "",
            "supplementalClassPath": ""
        }
    ],
    "cells": [
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "Tutorial for New Output Types",
            "collapsed": false
        },
        {
            "id": "codefE5W8q",
            "type": "code",
            "evaluator": "Html",
            "input": {
                "body": "<div class=\"row-fluid\">\n\n  <div class=\"span9\">\n\n    <h1>Overview</h1>\n\n\t\t<p>Beaker supports new output types such as Pie Chart, Line Chart and Bubble Chart. User has the flexibility to use the Automatic Bounds or configure\n    \this own Bounds for the different charts. Multiple Pie charts and multiple Line charts are supported. This version consists of better user experience which allows user to hide the \n    \tconfiguration to get a better view of the chart.</p>\n\n    <h2>Language support</h2>\n    \n    <h3> Plugins</h3>\n    <p>Plugins for the output types are available in the project GitHub link </p>\n\n    <p><strong>Code:</strong> Python (IPython), R</p>\n\n    <h1>How to Set Up</h1>\n    <p>Load Java Script file(s) in JavaScript Console using a new cell as shown below</p>\n  </div>\n</div>",
                "hidden": true
            },
            "output": {
                "selectedType": "BeakerDisplay",
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Html",
                    "object": "<div class=\"row-fluid\">\n\n  <div class=\"span9\">\n\n    <h1>Overview</h1>\n\n\t\t<p>Beaker supports new output types such as Pie Chart, Line Chart and Bubble Chart. User has the flexibility to use the Automatic Bounds or configure\n    \this own Bounds for the different charts. Multiple Pie charts and multiple Line charts are supported. This version consists of better user experience which allows user to hide the \n    \tconfiguration to get a better view of the chart.</p>\n\n    <h2>Language support</h2>\n    \n    <h3> Plugins</h3>\n    <p>Plugins for the output types are available in the project GitHub link </p>\n\n    <p><strong>Code:</strong> Python (IPython), R</p>\n\n    <h1>How to Set Up</h1>\n    <p>Load Java Script file(s) in JavaScript Console using a new cell as shown below</p>\n  </div>\n</div>"
                },
                "elapsedTime": 1
            }
        },
        {
            "id": "codev77Zhl",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": "bkHelper.loadJS(\"https://raw.githubusercontent.com/NYUITP/sp14_2sgm/master/bkoFlotr2Line.js\");\nbkHelper.loadJS(\"https://raw.githubusercontent.com/NYUITP/sp14_2sgm/master/bkoFlotr2pie.js\");\nbkHelper.loadJS(\"https://raw.githubusercontent.com/NYUITP/sp14_2sgm/master/bkoFlotr2Bubble.js\");"
            },
            "output": {
                "selectedType": "Text",
                "result": "undefined"
            }
        },
        {
            "id": "codeoeg4dw",
            "type": "code",
            "evaluator": "Html",
            "input": {
                "body": "<div class=\"row-fluid\">\n\n  <div class=\"span9\">\n       <p>Register the output types using a new cell as shown below</p>\n  </div>\n</div>",
                "hidden": true
            },
            "output": {
                "selectedType": "BeakerDisplay",
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Html",
                    "object": "<div class=\"row-fluid\">\n\n  <div class=\"span9\">\n       <p>Register the output types using a new cell as shown below</p>\n  </div>\n</div>"
                },
                "elapsedTime": 1
            }
        },
        {
            "id": "codejUEkhV",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": "beaker.registerOutputDisplay(\"TableDisplay\", [\"flotr2Line\"], 0);\nPie: beaker.registerOutputDisplay(\"TableDisplay\", [\"flotr2Pie\"], 1);\nbeaker.registerOutputDisplay(\"TableDisplay\", [\"flotr2Bubble\"], 2);"
            },
            "output": {
                "selectedType": "Text",
                "result": "undefined"
            }
        },
        {
            "id": "sectionH6W1ik",
            "type": "section",
            "title": "Input-Output Display",
            "level": 1,
            "collapsed": false
        },
        {
            "id": "sectioncBV2y9",
            "type": "section",
            "title": "iPython",
            "level": 2,
            "collapsed": false
        },
        {
            "id": "sectionf6bX6o",
            "type": "section",
            "title": "Input Examples -- iPython",
            "level": 3,
            "collapsed": false
        },
        {
            "id": "codecT0KJd",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": "import pandas as pd\ndf = pd.DataFrame([['USA', 5, 15], ['India', 10, 30], ['China', 15, 20], ['Japan',20, 5], ['Australia',30, 25]], columns=['Country', 'Population %', 'Unemployment %'])\ndf"
            },
            "output": {
                "selectedType": "Hidden",
                "outputArrived": true,
                "elapsedTime": 364
            }
        },
        {
            "id": "code64VDns",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": "import pandas as pd\ndf = pd.DataFrame([[12,28000, 20], [13,25000, 21], [16,65200,11], [6,34500,15], [23,56000,14]], columns=['ProductNumber','Sales', 'Market Share %'])\ndf"
            },
            "output": {
                "selectedType": "Hidden",
                "outputArrived": true,
                "elapsedTime": 656
            }
        },
        {
            "id": "codeTZXNuE",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": "import pandas as pd\ndf = pd.DataFrame([[\"New York\", 25], [\"Los Angeles\", 30], [\"Seattle\", 45]], columns=['City', 'Employees'])\ndf"
            },
            "output": {
                "selectedType": "Hidden",
                "outputArrived": true,
                "elapsedTime": 446
            }
        },
        {
            "id": "section7vzKW2",
            "type": "section",
            "title": "Input Examples -- R",
            "level": 3,
            "collapsed": false
        },
        {
            "id": "codelo2LnR",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": "food = c(2, 3, 5) \ndrink = c(10, 29, -10) \nfinished = c(TRUE, FALSE, TRUE) \ndf = data.frame(food, drink, finished)"
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 195
            }
        },
        {
            "id": "codeHIMWo7",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": "food = c(2, 3, 5) \ndrink = c(10, 29, -10) \nsnack = c(1, 20, 50)\nbaba = c(2, 3, 4)\ndf = data.frame(food, drink, snack)"
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 90
            }
        }
    ]
}
